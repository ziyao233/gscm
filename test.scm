(begin
  (def range (lambda (l r s)
    (if (> l r)
      '()
      (cons l (range (+ l s) r s)))))
  (def filter (lambda (f xs)
    (if (null? xs)
        '()
        (begin
          (def ns (filter f (cdr xs)))
	  (if (f (car xs))
	      (cons (car xs) ns)
	      ns)))))
  (def map (lambda (f xs)
    (if (null? xs)
        '()
	(cons (f (car xs)) (map f (cdr xs))))))
  (def reduce (lambda (f x xs)
    (if (null? xs)
        x
        (f (car xs) (reduce f x (cdr xs))))))
  (def list '(1 2 3 4))
  (display list)
  (newline)
  (def generatedList (range 1 20 2))
  (display generatedList)
  (newline)
  (display (filter (lambda (x) (= 0 (mod x 2))) list))
  (newline)
  (display (map (lambda (x) (- x 1)) generatedList))
  (newline)
  (display (reduce (lambda (s x) (+ s x)) 0 generatedList))
  (newline)
)
